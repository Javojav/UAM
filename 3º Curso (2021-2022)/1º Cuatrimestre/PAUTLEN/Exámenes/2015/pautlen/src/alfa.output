Terminales no usados en la gramática

   TOK_ERROR


Gramática

    0 $accept: programa $end

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones wrt_main sentencias final '}'

    2 iniciar: %empty

    3 final: %empty

    4 dec_vars: %empty

    5 wrt_main: %empty

    6 declaraciones: declaracion
    7              | declaracion declaraciones

    8 declaracion: clase identificadores ';'

    9 clase: clase_escalar
   10      | clase_vector

   11 clase_escalar: tipo

   12 tipo: TOK_INT
   13     | TOK_BOOLEAN

   14 clase_vector: TOK_ARRAY tipo '[' TOK_CONSTANTE_ENTERA ']'

   15 identificadores: identificador_new
   16                | identificador_new ',' identificadores

   17 funciones: funcion funciones
   18          | %empty

   19 funcion: fn_declaration sentencias '}'

   20 fn_declaration: fn_name '(' parametros_funcion ')' '{' declaraciones_funcion

   21 fn_name: TOK_FUNCTION tipo identificador_use

   22 parametros_funcion: parametro_funcion resto_parametros_funcion
   23                   | %empty

   24 resto_parametros_funcion: ';' parametro_funcion resto_parametros_funcion
   25                         | %empty

   26 idpf: identificador_use

   27 parametro_funcion: tipo idpf

   28 declaraciones_funcion: declaraciones
   29                      | %empty

   30 sentencias: sentencia
   31           | sentencia sentencias

   32 sentencia: sentencia_simple ';'
   33          | bloque

   34 sentencia_simple: asignacion
   35                 | lectura
   36                 | escritura
   37                 | retorno_funcion
   38                 | init_vector

   39 $@1: %empty

   40 init_vector: TOK_INIT identificador_use $@1 '{' valores_vector '}'

   41 valores_vector: exp

   42 $@2: %empty

   43 valores_vector: exp ';' $@2 valores_vector

   44 bloque: condicional
   45       | bucle

   46 asignacion: identificador_use '=' exp
   47           | elemento_vector '=' exp

   48 elemento_vector: identificador_use '[' exp ']'

   49 condicional: if_sentencias
   50            | if_sentencias TOK_ELSE '{' sentencias '}'

   51 if_sentencias: if_exp sentencias '}'

   52 if_exp: TOK_IF '(' exp ')' '{'

   53 bucle: bucle_exp sentencias '}'

   54 bucle_exp: bucle_tok '(' exp ')' '{'

   55 bucle_tok: TOK_WHILE

   56 lectura: TOK_SCANF identificador_use

   57 escritura: TOK_PRINTF exp

   58 retorno_funcion: TOK_RETURN exp

   59 exp: exp '+' exp
   60    | exp '-' exp
   61    | exp '/' exp
   62    | exp '*' exp
   63    | '-' exp
   64    | exp TOK_AND exp
   65    | exp TOK_OR exp
   66    | '!' exp
   67    | identificador_use
   68    | constante
   69    | '(' exp ')'
   70    | '(' comparacion ')'
   71    | elemento_vector
   72    | llamada_funcion '(' lista_expresiones ')'

   73 llamada_funcion: identificador_use

   74 lista_expresiones: exp resto_lista_expresiones
   75                  | %empty

   76 resto_lista_expresiones: ',' exp resto_lista_expresiones
   77                        | %empty

   78 comparacion: exp TOK_IGUAL exp
   79            | exp TOK_DISTINTO exp
   80            | exp TOK_MENORIGUAL exp
   81            | exp TOK_MAYORIGUAL exp
   82            | exp '<' exp
   83            | exp '>' exp

   84 constante: constante_logica
   85          | constante_entera

   86 constante_logica: TOK_TRUE
   87                 | TOK_FALSE

   88 constante_entera: TOK_CONSTANTE_ENTERA

   89 identificador_use: TOK_IDENTIFICADOR

   90 identificador_new: TOK_IDENTIFICADOR


Terminales con las reglas donde aparecen

$end (0) 0
'!' (33) 66
'(' (40) 20 52 54 69 70 72
')' (41) 20 52 54 69 70 72
'*' (42) 62
'+' (43) 59
',' (44) 16 76
'-' (45) 60 63
'/' (47) 61
';' (59) 8 24 32 43
'<' (60) 82
'=' (61) 46 47
'>' (62) 83
'[' (91) 14 48
']' (93) 14 48
'{' (123) 1 20 40 50 52 54
'}' (125) 1 19 40 50 51 53
error (256)
TOK_MAIN (258) 1
TOK_INT (259) 12
TOK_BOOLEAN (260) 13
TOK_ARRAY (261) 14
TOK_FUNCTION (262) 21
TOK_IF (263) 52
TOK_ELSE (264) 50
TOK_WHILE (265) 55
TOK_SCANF (266) 56
TOK_PRINTF (267) 57
TOK_RETURN (268) 58
TOK_INIT (269) 40
TOK_AND (270) 64
TOK_OR (271) 65
TOK_IGUAL (272) 78
TOK_DISTINTO (273) 79
TOK_MENORIGUAL (274) 80
TOK_MAYORIGUAL (275) 81
TOK_IDENTIFICADOR (276) 89 90
TOK_CONSTANTE_ENTERA (277) 14 88
TOK_TRUE (278) 86
TOK_FALSE (279) 87
TOK_ERROR (280)
NEG (281)


No terminales con las reglas donde aparecen

$accept (43)
    en la izquierda: 0
programa (44)
    en la izquierda: 1, en la derecha: 0
iniciar (45)
    en la izquierda: 2, en la derecha: 1
final (46)
    en la izquierda: 3, en la derecha: 1
dec_vars (47)
    en la izquierda: 4, en la derecha: 1
wrt_main (48)
    en la izquierda: 5, en la derecha: 1
declaraciones (49)
    en la izquierda: 6 7, en la derecha: 1 7 28
declaracion (50)
    en la izquierda: 8, en la derecha: 6 7
clase (51)
    en la izquierda: 9 10, en la derecha: 8
clase_escalar (52)
    en la izquierda: 11, en la derecha: 9
tipo (53)
    en la izquierda: 12 13, en la derecha: 11 14 21 27
clase_vector (54)
    en la izquierda: 14, en la derecha: 10
identificadores (55)
    en la izquierda: 15 16, en la derecha: 8 16
funciones (56)
    en la izquierda: 17 18, en la derecha: 1 17
funcion (57)
    en la izquierda: 19, en la derecha: 17
fn_declaration (58)
    en la izquierda: 20, en la derecha: 19
fn_name (59)
    en la izquierda: 21, en la derecha: 20
parametros_funcion (60)
    en la izquierda: 22 23, en la derecha: 20
resto_parametros_funcion (61)
    en la izquierda: 24 25, en la derecha: 22 24
idpf (62)
    en la izquierda: 26, en la derecha: 27
parametro_funcion (63)
    en la izquierda: 27, en la derecha: 22 24
declaraciones_funcion (64)
    en la izquierda: 28 29, en la derecha: 20
sentencias (65)
    en la izquierda: 30 31, en la derecha: 1 19 31 50 51 53
sentencia (66)
    en la izquierda: 32 33, en la derecha: 30 31
sentencia_simple (67)
    en la izquierda: 34 35 36 37 38, en la derecha: 32
init_vector (68)
    en la izquierda: 40, en la derecha: 38
$@1 (69)
    en la izquierda: 39, en la derecha: 40
valores_vector (70)
    en la izquierda: 41 43, en la derecha: 40 43
$@2 (71)
    en la izquierda: 42, en la derecha: 43
bloque (72)
    en la izquierda: 44 45, en la derecha: 33
asignacion (73)
    en la izquierda: 46 47, en la derecha: 34
elemento_vector (74)
    en la izquierda: 48, en la derecha: 47 71
condicional (75)
    en la izquierda: 49 50, en la derecha: 44
if_sentencias (76)
    en la izquierda: 51, en la derecha: 49 50
if_exp (77)
    en la izquierda: 52, en la derecha: 51
bucle (78)
    en la izquierda: 53, en la derecha: 45
bucle_exp (79)
    en la izquierda: 54, en la derecha: 53
bucle_tok (80)
    en la izquierda: 55, en la derecha: 54
lectura (81)
    en la izquierda: 56, en la derecha: 35
escritura (82)
    en la izquierda: 57, en la derecha: 36
retorno_funcion (83)
    en la izquierda: 58, en la derecha: 37
exp (84)
    en la izquierda: 59 60 61 62 63 64 65 66 67 68 69 70 71 72, en la derecha:
    41 43 46 47 48 52 54 57 58 59 60 61 62 63 64 65 66 69 74 76 78
    79 80 81 82 83
llamada_funcion (85)
    en la izquierda: 73, en la derecha: 72
lista_expresiones (86)
    en la izquierda: 74 75, en la derecha: 72
resto_lista_expresiones (87)
    en la izquierda: 76 77, en la derecha: 74 76
comparacion (88)
    en la izquierda: 78 79 80 81 82 83, en la derecha: 70
constante (89)
    en la izquierda: 84 85, en la derecha: 68
constante_logica (90)
    en la izquierda: 86 87, en la derecha: 84
constante_entera (91)
    en la izquierda: 88, en la derecha: 85
identificador_use (92)
    en la izquierda: 89, en la derecha: 21 26 40 46 48 56 67 73
identificador_new (93)
    en la izquierda: 90, en la derecha: 15 16


Estado 0

    0 $accept: . programa $end

    TOK_MAIN  desplazar e ir al estado 1

    programa  ir al estado 2


Estado 1

    1 programa: TOK_MAIN . '{' iniciar declaraciones dec_vars funciones wrt_main sentencias final '}'

    '{'  desplazar e ir al estado 3


Estado 2

    0 $accept: programa . $end

    $end  desplazar e ir al estado 4


Estado 3

    1 programa: TOK_MAIN '{' . iniciar declaraciones dec_vars funciones wrt_main sentencias final '}'

    $default  reduce usando la regla 2 (iniciar)

    iniciar  ir al estado 5


Estado 4

    0 $accept: programa $end .

    $default  aceptar


Estado 5

    1 programa: TOK_MAIN '{' iniciar . declaraciones dec_vars funciones wrt_main sentencias final '}'

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7
    TOK_ARRAY    desplazar e ir al estado 8

    declaraciones  ir al estado 9
    declaracion    ir al estado 10
    clase          ir al estado 11
    clase_escalar  ir al estado 12
    tipo           ir al estado 13
    clase_vector   ir al estado 14


Estado 6

   12 tipo: TOK_INT .

    $default  reduce usando la regla 12 (tipo)


Estado 7

   13 tipo: TOK_BOOLEAN .

    $default  reduce usando la regla 13 (tipo)


Estado 8

   14 clase_vector: TOK_ARRAY . tipo '[' TOK_CONSTANTE_ENTERA ']'

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7

    tipo  ir al estado 15


Estado 9

    1 programa: TOK_MAIN '{' iniciar declaraciones . dec_vars funciones wrt_main sentencias final '}'

    $default  reduce usando la regla 4 (dec_vars)

    dec_vars  ir al estado 16


Estado 10

    6 declaraciones: declaracion .
    7              | declaracion . declaraciones

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7
    TOK_ARRAY    desplazar e ir al estado 8

    $default  reduce usando la regla 6 (declaraciones)

    declaraciones  ir al estado 17
    declaracion    ir al estado 10
    clase          ir al estado 11
    clase_escalar  ir al estado 12
    tipo           ir al estado 13
    clase_vector   ir al estado 14


Estado 11

    8 declaracion: clase . identificadores ';'

    TOK_IDENTIFICADOR  desplazar e ir al estado 18

    identificadores    ir al estado 19
    identificador_new  ir al estado 20


Estado 12

    9 clase: clase_escalar .

    $default  reduce usando la regla 9 (clase)


Estado 13

   11 clase_escalar: tipo .

    $default  reduce usando la regla 11 (clase_escalar)


Estado 14

   10 clase: clase_vector .

    $default  reduce usando la regla 10 (clase)


Estado 15

   14 clase_vector: TOK_ARRAY tipo . '[' TOK_CONSTANTE_ENTERA ']'

    '['  desplazar e ir al estado 21


Estado 16

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars . funciones wrt_main sentencias final '}'

    TOK_FUNCTION  desplazar e ir al estado 22

    $default  reduce usando la regla 18 (funciones)

    funciones       ir al estado 23
    funcion         ir al estado 24
    fn_declaration  ir al estado 25
    fn_name         ir al estado 26


Estado 17

    7 declaraciones: declaracion declaraciones .

    $default  reduce usando la regla 7 (declaraciones)


Estado 18

   90 identificador_new: TOK_IDENTIFICADOR .

    $default  reduce usando la regla 90 (identificador_new)


Estado 19

    8 declaracion: clase identificadores . ';'

    ';'  desplazar e ir al estado 27


Estado 20

   15 identificadores: identificador_new .
   16                | identificador_new . ',' identificadores

    ','  desplazar e ir al estado 28

    $default  reduce usando la regla 15 (identificadores)


Estado 21

   14 clase_vector: TOK_ARRAY tipo '[' . TOK_CONSTANTE_ENTERA ']'

    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 29


Estado 22

   21 fn_name: TOK_FUNCTION . tipo identificador_use

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7

    tipo  ir al estado 30


Estado 23

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones . wrt_main sentencias final '}'

    $default  reduce usando la regla 5 (wrt_main)

    wrt_main  ir al estado 31


Estado 24

   17 funciones: funcion . funciones

    TOK_FUNCTION  desplazar e ir al estado 22

    $default  reduce usando la regla 18 (funciones)

    funciones       ir al estado 32
    funcion         ir al estado 24
    fn_declaration  ir al estado 25
    fn_name         ir al estado 26


Estado 25

   19 funcion: fn_declaration . sentencias '}'

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    sentencias         ir al estado 40
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 26

   20 fn_declaration: fn_name . '(' parametros_funcion ')' '{' declaraciones_funcion

    '('  desplazar e ir al estado 57


Estado 27

    8 declaracion: clase identificadores ';' .

    $default  reduce usando la regla 8 (declaracion)


Estado 28

   16 identificadores: identificador_new ',' . identificadores

    TOK_IDENTIFICADOR  desplazar e ir al estado 18

    identificadores    ir al estado 58
    identificador_new  ir al estado 20


Estado 29

   14 clase_vector: TOK_ARRAY tipo '[' TOK_CONSTANTE_ENTERA . ']'

    ']'  desplazar e ir al estado 59


Estado 30

   21 fn_name: TOK_FUNCTION tipo . identificador_use

    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    identificador_use  ir al estado 60


Estado 31

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones wrt_main . sentencias final '}'

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    sentencias         ir al estado 61
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 32

   17 funciones: funcion funciones .

    $default  reduce usando la regla 17 (funciones)


Estado 33

   52 if_exp: TOK_IF . '(' exp ')' '{'

    '('  desplazar e ir al estado 62


Estado 34

   55 bucle_tok: TOK_WHILE .

    $default  reduce usando la regla 55 (bucle_tok)


Estado 35

   56 lectura: TOK_SCANF . identificador_use

    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    identificador_use  ir al estado 63


Estado 36

   57 escritura: TOK_PRINTF . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 71
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 37

   58 retorno_funcion: TOK_RETURN . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 77
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 38

   40 init_vector: TOK_INIT . identificador_use $@1 '{' valores_vector '}'

    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    identificador_use  ir al estado 78


Estado 39

   89 identificador_use: TOK_IDENTIFICADOR .

    $default  reduce usando la regla 89 (identificador_use)


Estado 40

   19 funcion: fn_declaration sentencias . '}'

    '}'  desplazar e ir al estado 79


Estado 41

   30 sentencias: sentencia .
   31           | sentencia . sentencias

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    $default  reduce usando la regla 30 (sentencias)

    sentencias         ir al estado 80
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 42

   32 sentencia: sentencia_simple . ';'

    ';'  desplazar e ir al estado 81


Estado 43

   38 sentencia_simple: init_vector .

    $default  reduce usando la regla 38 (sentencia_simple)


Estado 44

   33 sentencia: bloque .

    $default  reduce usando la regla 33 (sentencia)


Estado 45

   34 sentencia_simple: asignacion .

    $default  reduce usando la regla 34 (sentencia_simple)


Estado 46

   47 asignacion: elemento_vector . '=' exp

    '='  desplazar e ir al estado 82


Estado 47

   44 bloque: condicional .

    $default  reduce usando la regla 44 (bloque)


Estado 48

   49 condicional: if_sentencias .
   50            | if_sentencias . TOK_ELSE '{' sentencias '}'

    TOK_ELSE  desplazar e ir al estado 83

    $default  reduce usando la regla 49 (condicional)


Estado 49

   51 if_sentencias: if_exp . sentencias '}'

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    sentencias         ir al estado 84
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 50

   45 bloque: bucle .

    $default  reduce usando la regla 45 (bloque)


Estado 51

   53 bucle: bucle_exp . sentencias '}'

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    sentencias         ir al estado 85
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 52

   54 bucle_exp: bucle_tok . '(' exp ')' '{'

    '('  desplazar e ir al estado 86


Estado 53

   35 sentencia_simple: lectura .

    $default  reduce usando la regla 35 (sentencia_simple)


Estado 54

   36 sentencia_simple: escritura .

    $default  reduce usando la regla 36 (sentencia_simple)


Estado 55

   37 sentencia_simple: retorno_funcion .

    $default  reduce usando la regla 37 (sentencia_simple)


Estado 56

   46 asignacion: identificador_use . '=' exp
   48 elemento_vector: identificador_use . '[' exp ']'

    '['  desplazar e ir al estado 87
    '='  desplazar e ir al estado 88


Estado 57

   20 fn_declaration: fn_name '(' . parametros_funcion ')' '{' declaraciones_funcion

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7

    $default  reduce usando la regla 23 (parametros_funcion)

    tipo                ir al estado 89
    parametros_funcion  ir al estado 90
    parametro_funcion   ir al estado 91


Estado 58

   16 identificadores: identificador_new ',' identificadores .

    $default  reduce usando la regla 16 (identificadores)


Estado 59

   14 clase_vector: TOK_ARRAY tipo '[' TOK_CONSTANTE_ENTERA ']' .

    $default  reduce usando la regla 14 (clase_vector)


Estado 60

   21 fn_name: TOK_FUNCTION tipo identificador_use .

    $default  reduce usando la regla 21 (fn_name)


Estado 61

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones wrt_main sentencias . final '}'

    $default  reduce usando la regla 3 (final)

    final  ir al estado 92


Estado 62

   52 if_exp: TOK_IF '(' . exp ')' '{'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 93
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 63

   56 lectura: TOK_SCANF identificador_use .

    $default  reduce usando la regla 56 (lectura)


Estado 64

   88 constante_entera: TOK_CONSTANTE_ENTERA .

    $default  reduce usando la regla 88 (constante_entera)


Estado 65

   86 constante_logica: TOK_TRUE .

    $default  reduce usando la regla 86 (constante_logica)


Estado 66

   87 constante_logica: TOK_FALSE .

    $default  reduce usando la regla 87 (constante_logica)


Estado 67

   63 exp: '-' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 94
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 68

   66 exp: '!' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 95
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 69

   69 exp: '(' . exp ')'
   70    | '(' . comparacion ')'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 96
    llamada_funcion    ir al estado 72
    comparacion        ir al estado 97
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 70

   71 exp: elemento_vector .

    $default  reduce usando la regla 71 (exp)


Estado 71

   57 escritura: TOK_PRINTF exp .
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 57 (escritura)


Estado 72

   72 exp: llamada_funcion . '(' lista_expresiones ')'

    '('  desplazar e ir al estado 104


Estado 73

   68 exp: constante .

    $default  reduce usando la regla 68 (exp)


Estado 74

   84 constante: constante_logica .

    $default  reduce usando la regla 84 (constante)


Estado 75

   85 constante: constante_entera .

    $default  reduce usando la regla 85 (constante)


Estado 76

   48 elemento_vector: identificador_use . '[' exp ']'
   67 exp: identificador_use .
   73 llamada_funcion: identificador_use .

    '['  desplazar e ir al estado 87

    '('       reduce usando la regla 73 (llamada_funcion)
    $default  reduce usando la regla 67 (exp)


Estado 77

   58 retorno_funcion: TOK_RETURN exp .
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 58 (retorno_funcion)


Estado 78

   40 init_vector: TOK_INIT identificador_use . $@1 '{' valores_vector '}'

    $default  reduce usando la regla 39 ($@1)

    $@1  ir al estado 105


Estado 79

   19 funcion: fn_declaration sentencias '}' .

    $default  reduce usando la regla 19 (funcion)


Estado 80

   31 sentencias: sentencia sentencias .

    $default  reduce usando la regla 31 (sentencias)


Estado 81

   32 sentencia: sentencia_simple ';' .

    $default  reduce usando la regla 32 (sentencia)


Estado 82

   47 asignacion: elemento_vector '=' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 106
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 83

   50 condicional: if_sentencias TOK_ELSE . '{' sentencias '}'

    '{'  desplazar e ir al estado 107


Estado 84

   51 if_sentencias: if_exp sentencias . '}'

    '}'  desplazar e ir al estado 108


Estado 85

   53 bucle: bucle_exp sentencias . '}'

    '}'  desplazar e ir al estado 109


Estado 86

   54 bucle_exp: bucle_tok '(' . exp ')' '{'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 110
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 87

   48 elemento_vector: identificador_use '[' . exp ']'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 111
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 88

   46 asignacion: identificador_use '=' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 112
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 89

   27 parametro_funcion: tipo . idpf

    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    idpf               ir al estado 113
    identificador_use  ir al estado 114


Estado 90

   20 fn_declaration: fn_name '(' parametros_funcion . ')' '{' declaraciones_funcion

    ')'  desplazar e ir al estado 115


Estado 91

   22 parametros_funcion: parametro_funcion . resto_parametros_funcion

    ';'  desplazar e ir al estado 116

    $default  reduce usando la regla 25 (resto_parametros_funcion)

    resto_parametros_funcion  ir al estado 117


Estado 92

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones wrt_main sentencias final . '}'

    '}'  desplazar e ir al estado 118


Estado 93

   52 if_exp: TOK_IF '(' exp . ')' '{'
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ')'      desplazar e ir al estado 119


Estado 94

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   63    | '-' exp .
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    $default  reduce usando la regla 63 (exp)


Estado 95

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   66    | '!' exp .

    $default  reduce usando la regla 66 (exp)


Estado 96

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   69    | '(' exp . ')'
   78 comparacion: exp . TOK_IGUAL exp
   79            | exp . TOK_DISTINTO exp
   80            | exp . TOK_MENORIGUAL exp
   81            | exp . TOK_MAYORIGUAL exp
   82            | exp . '<' exp
   83            | exp . '>' exp

    TOK_AND         desplazar e ir al estado 98
    TOK_OR          desplazar e ir al estado 99
    TOK_IGUAL       desplazar e ir al estado 120
    TOK_DISTINTO    desplazar e ir al estado 121
    TOK_MENORIGUAL  desplazar e ir al estado 122
    TOK_MAYORIGUAL  desplazar e ir al estado 123
    '+'             desplazar e ir al estado 100
    '-'             desplazar e ir al estado 101
    '*'             desplazar e ir al estado 102
    '/'             desplazar e ir al estado 103
    ')'             desplazar e ir al estado 124
    '<'             desplazar e ir al estado 125
    '>'             desplazar e ir al estado 126


Estado 97

   70 exp: '(' comparacion . ')'

    ')'  desplazar e ir al estado 127


Estado 98

   64 exp: exp TOK_AND . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 128
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 99

   65 exp: exp TOK_OR . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 129
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 100

   59 exp: exp '+' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 130
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 101

   60 exp: exp '-' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 131
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 102

   62 exp: exp '*' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 132
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 103

   61 exp: exp '/' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 133
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 104

   72 exp: llamada_funcion '(' . lista_expresiones ')'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    $default  reduce usando la regla 75 (lista_expresiones)

    elemento_vector    ir al estado 70
    exp                ir al estado 134
    llamada_funcion    ir al estado 72
    lista_expresiones  ir al estado 135
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 105

   40 init_vector: TOK_INIT identificador_use $@1 . '{' valores_vector '}'

    '{'  desplazar e ir al estado 136


Estado 106

   47 asignacion: elemento_vector '=' exp .
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 47 (asignacion)


Estado 107

   50 condicional: if_sentencias TOK_ELSE '{' . sentencias '}'

    TOK_IF             desplazar e ir al estado 33
    TOK_WHILE          desplazar e ir al estado 34
    TOK_SCANF          desplazar e ir al estado 35
    TOK_PRINTF         desplazar e ir al estado 36
    TOK_RETURN         desplazar e ir al estado 37
    TOK_INIT           desplazar e ir al estado 38
    TOK_IDENTIFICADOR  desplazar e ir al estado 39

    sentencias         ir al estado 137
    sentencia          ir al estado 41
    sentencia_simple   ir al estado 42
    init_vector        ir al estado 43
    bloque             ir al estado 44
    asignacion         ir al estado 45
    elemento_vector    ir al estado 46
    condicional        ir al estado 47
    if_sentencias      ir al estado 48
    if_exp             ir al estado 49
    bucle              ir al estado 50
    bucle_exp          ir al estado 51
    bucle_tok          ir al estado 52
    lectura            ir al estado 53
    escritura          ir al estado 54
    retorno_funcion    ir al estado 55
    identificador_use  ir al estado 56


Estado 108

   51 if_sentencias: if_exp sentencias '}' .

    $default  reduce usando la regla 51 (if_sentencias)


Estado 109

   53 bucle: bucle_exp sentencias '}' .

    $default  reduce usando la regla 53 (bucle)


Estado 110

   54 bucle_exp: bucle_tok '(' exp . ')' '{'
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ')'      desplazar e ir al estado 138


Estado 111

   48 elemento_vector: identificador_use '[' exp . ']'
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ']'      desplazar e ir al estado 139


Estado 112

   46 asignacion: identificador_use '=' exp .
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 46 (asignacion)


Estado 113

   27 parametro_funcion: tipo idpf .

    $default  reduce usando la regla 27 (parametro_funcion)


Estado 114

   26 idpf: identificador_use .

    $default  reduce usando la regla 26 (idpf)


Estado 115

   20 fn_declaration: fn_name '(' parametros_funcion ')' . '{' declaraciones_funcion

    '{'  desplazar e ir al estado 140


Estado 116

   24 resto_parametros_funcion: ';' . parametro_funcion resto_parametros_funcion

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7

    tipo               ir al estado 89
    parametro_funcion  ir al estado 141


Estado 117

   22 parametros_funcion: parametro_funcion resto_parametros_funcion .

    $default  reduce usando la regla 22 (parametros_funcion)


Estado 118

    1 programa: TOK_MAIN '{' iniciar declaraciones dec_vars funciones wrt_main sentencias final '}' .

    $default  reduce usando la regla 1 (programa)


Estado 119

   52 if_exp: TOK_IF '(' exp ')' . '{'

    '{'  desplazar e ir al estado 142


Estado 120

   78 comparacion: exp TOK_IGUAL . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 143
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 121

   79 comparacion: exp TOK_DISTINTO . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 144
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 122

   80 comparacion: exp TOK_MENORIGUAL . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 145
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 123

   81 comparacion: exp TOK_MAYORIGUAL . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 146
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 124

   69 exp: '(' exp ')' .

    $default  reduce usando la regla 69 (exp)


Estado 125

   82 comparacion: exp '<' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 147
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 126

   83 comparacion: exp '>' . exp

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 148
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 127

   70 exp: '(' comparacion ')' .

    $default  reduce usando la regla 70 (exp)


Estado 128

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   64    | exp TOK_AND exp .
   65    | exp . TOK_OR exp

    $default  reduce usando la regla 64 (exp)


Estado 129

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   65    | exp TOK_OR exp .

    TOK_AND  desplazar e ir al estado 98
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 65 (exp)


Estado 130

   59 exp: exp . '+' exp
   59    | exp '+' exp .
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 59 (exp)


Estado 131

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   60    | exp '-' exp .
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 60 (exp)


Estado 132

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   62    | exp '*' exp .
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    $default  reduce usando la regla 62 (exp)


Estado 133

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   61    | exp '/' exp .
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    $default  reduce usando la regla 61 (exp)


Estado 134

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   74 lista_expresiones: exp . resto_lista_expresiones

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ','      desplazar e ir al estado 149

    $default  reduce usando la regla 77 (resto_lista_expresiones)

    resto_lista_expresiones  ir al estado 150


Estado 135

   72 exp: llamada_funcion '(' lista_expresiones . ')'

    ')'  desplazar e ir al estado 151


Estado 136

   40 init_vector: TOK_INIT identificador_use $@1 '{' . valores_vector '}'

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    valores_vector     ir al estado 152
    elemento_vector    ir al estado 70
    exp                ir al estado 153
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 137

   50 condicional: if_sentencias TOK_ELSE '{' sentencias . '}'

    '}'  desplazar e ir al estado 154


Estado 138

   54 bucle_exp: bucle_tok '(' exp ')' . '{'

    '{'  desplazar e ir al estado 155


Estado 139

   48 elemento_vector: identificador_use '[' exp ']' .

    $default  reduce usando la regla 48 (elemento_vector)


Estado 140

   20 fn_declaration: fn_name '(' parametros_funcion ')' '{' . declaraciones_funcion

    TOK_INT      desplazar e ir al estado 6
    TOK_BOOLEAN  desplazar e ir al estado 7
    TOK_ARRAY    desplazar e ir al estado 8

    $default  reduce usando la regla 29 (declaraciones_funcion)

    declaraciones          ir al estado 156
    declaracion            ir al estado 10
    clase                  ir al estado 11
    clase_escalar          ir al estado 12
    tipo                   ir al estado 13
    clase_vector           ir al estado 14
    declaraciones_funcion  ir al estado 157


Estado 141

   24 resto_parametros_funcion: ';' parametro_funcion . resto_parametros_funcion

    ';'  desplazar e ir al estado 116

    $default  reduce usando la regla 25 (resto_parametros_funcion)

    resto_parametros_funcion  ir al estado 158


Estado 142

   52 if_exp: TOK_IF '(' exp ')' '{' .

    $default  reduce usando la regla 52 (if_exp)


Estado 143

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   78 comparacion: exp TOK_IGUAL exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 78 (comparacion)


Estado 144

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   79 comparacion: exp TOK_DISTINTO exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 79 (comparacion)


Estado 145

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   80 comparacion: exp TOK_MENORIGUAL exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 80 (comparacion)


Estado 146

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   81 comparacion: exp TOK_MAYORIGUAL exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 81 (comparacion)


Estado 147

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   82 comparacion: exp '<' exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 82 (comparacion)


Estado 148

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   83 comparacion: exp '>' exp .

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103

    $default  reduce usando la regla 83 (comparacion)


Estado 149

   76 resto_lista_expresiones: ',' . exp resto_lista_expresiones

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    elemento_vector    ir al estado 70
    exp                ir al estado 159
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 150

   74 lista_expresiones: exp resto_lista_expresiones .

    $default  reduce usando la regla 74 (lista_expresiones)


Estado 151

   72 exp: llamada_funcion '(' lista_expresiones ')' .

    $default  reduce usando la regla 72 (exp)


Estado 152

   40 init_vector: TOK_INIT identificador_use $@1 '{' valores_vector . '}'

    '}'  desplazar e ir al estado 160


Estado 153

   41 valores_vector: exp .
   43               | exp . ';' $@2 valores_vector
   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ';'      desplazar e ir al estado 161

    $default  reduce usando la regla 41 (valores_vector)


Estado 154

   50 condicional: if_sentencias TOK_ELSE '{' sentencias '}' .

    $default  reduce usando la regla 50 (condicional)


Estado 155

   54 bucle_exp: bucle_tok '(' exp ')' '{' .

    $default  reduce usando la regla 54 (bucle_exp)


Estado 156

   28 declaraciones_funcion: declaraciones .

    $default  reduce usando la regla 28 (declaraciones_funcion)


Estado 157

   20 fn_declaration: fn_name '(' parametros_funcion ')' '{' declaraciones_funcion .

    $default  reduce usando la regla 20 (fn_declaration)


Estado 158

   24 resto_parametros_funcion: ';' parametro_funcion resto_parametros_funcion .

    $default  reduce usando la regla 24 (resto_parametros_funcion)


Estado 159

   59 exp: exp . '+' exp
   60    | exp . '-' exp
   61    | exp . '/' exp
   62    | exp . '*' exp
   64    | exp . TOK_AND exp
   65    | exp . TOK_OR exp
   76 resto_lista_expresiones: ',' exp . resto_lista_expresiones

    TOK_AND  desplazar e ir al estado 98
    TOK_OR   desplazar e ir al estado 99
    '+'      desplazar e ir al estado 100
    '-'      desplazar e ir al estado 101
    '*'      desplazar e ir al estado 102
    '/'      desplazar e ir al estado 103
    ','      desplazar e ir al estado 149

    $default  reduce usando la regla 77 (resto_lista_expresiones)

    resto_lista_expresiones  ir al estado 162


Estado 160

   40 init_vector: TOK_INIT identificador_use $@1 '{' valores_vector '}' .

    $default  reduce usando la regla 40 (init_vector)


Estado 161

   43 valores_vector: exp ';' . $@2 valores_vector

    $default  reduce usando la regla 42 ($@2)

    $@2  ir al estado 163


Estado 162

   76 resto_lista_expresiones: ',' exp resto_lista_expresiones .

    $default  reduce usando la regla 76 (resto_lista_expresiones)


Estado 163

   43 valores_vector: exp ';' $@2 . valores_vector

    TOK_IDENTIFICADOR     desplazar e ir al estado 39
    TOK_CONSTANTE_ENTERA  desplazar e ir al estado 64
    TOK_TRUE              desplazar e ir al estado 65
    TOK_FALSE             desplazar e ir al estado 66
    '-'                   desplazar e ir al estado 67
    '!'                   desplazar e ir al estado 68
    '('                   desplazar e ir al estado 69

    valores_vector     ir al estado 164
    elemento_vector    ir al estado 70
    exp                ir al estado 153
    llamada_funcion    ir al estado 72
    constante          ir al estado 73
    constante_logica   ir al estado 74
    constante_entera   ir al estado 75
    identificador_use  ir al estado 76


Estado 164

   43 valores_vector: exp ';' $@2 valores_vector .

    $default  reduce usando la regla 43 (valores_vector)
